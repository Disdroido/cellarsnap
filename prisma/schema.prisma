// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  supabase_uid String
  email        String  @unique
  display_name String?

  memberships Membership[]
  MyCellars   MyCellars[]

  @@map("users")
}

enum ACCOUNT_ACCESS {
  READ_ONLY
  READ_WRITE
  ADMIN
  OWNER
}

model Membership {
  id         String         @id @default(uuid())
  user_id    String         @unique
  account_id String         @unique
  account    Account        @relation(fields: [account_id], references: [id])
  user       User           @relation(fields: [user_id], references: [id])
  access     ACCOUNT_ACCESS @default(READ_ONLY)
  pending    Boolean        @default(false)

  @@unique([user_id, account_id])
  @@map("membership")
}

model Account {
  id                     String       @id @default(uuid())
  name                   String
  current_period_ends    DateTime     @default(now())
  features               String[]
  plan_id                Int
  plan                   Plan         @relation(fields: [plan_id], references: [id])
  plan_name              String
  members                Membership[]
  notes                  Note[]
  max_notes              Int          @default(100)
  stripe_subscription_id String?
  stripe_customer_id     String?
  max_members            Int          @default(1)
  join_password          String       @unique
  ai_gen_max_pm          Int          @default(7)
  ai_gen_count           Int          @default(0)
  MyCellars              MyCellars[]

  @@map("account")
}

model Plan {
  id                Int       @id @default(autoincrement())
  name              String    @unique
  features          String[]
  accounts          Account[]
  max_notes         Int       @default(100)
  stripe_product_id String?
  max_members       Int       @default(1)
  ai_gen_max_pm     Int       @default(7)

  @@map("plan")
}

model Note {
  id         String   @id @default(uuid())
  account_id String?
  account    Account? @relation(fields: [account_id], references: [id])

  note_text String

  @@map("note")
}

model MyCellars {
  id          String  @id @default(uuid())
  cellar_name String
  user_id     String
  account_id  String
  account     Account @relation(fields: [account_id], references: [id])
  user        User    @relation(fields: [user_id], references: [id])
  racks       Json
  bottles     Json

  @@map("my_cellars")
}
